#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

struct node {
    struct node *next;
    int data;
    struct node *prev;
};
struct node *head = NULL;
void display(head);
void insert_begin(int value);
void insert_end(int value);
void insert_random(int value, int ele);
void delete_begin();
void delete_end();
void delete_random(int ele);
void count_nodes(head);
void delete_list();


int main()
{   
    int option;
    int ele;
    
    do{
    printf("\n\n *****MAIN MENU *****");
    printf("\n 1: Display the list");
    printf("\n 2: Add a node at the beginning");
    printf("\n 3: Add a node at the end");
    printf("\n 4: Add a node after a given node");
    printf("\n 5: Delete a node from the beginning");
    printf("\n 6: Delete a node from the end");
    printf("\n 7: Delete a node after a given node");
    printf("\n 8: Delete the entire list");
    printf("\n 9: EXIT");
    printf("\n\n Enter your option : ");
    scanf("%d", &option);
    
    switch(option){
        case 1: printf("The doubly linked list is : ");
                display();
                break;
                
        case 2: 
        printf("Enter data: \n");
        scanf("%d",&data);
        insert_begin(data)
        printf("Node inserted at the beginning.\n");
        break;
        
        case 3:
        printf("Enter data: \n");
        scanf("%d",&data);
        insert_end(data)
        printf("Node inserted at the end.\n");
        break;
        
        case 4:
        printf("Enter data: \n");
        scanf("%d",&data);
        printf("Enter element after which you want to insert node: ");
        scanf("%d",&ele)
        insert_end(int data,int ele)
        printf("Node inserted at the end.\n");
        break;
        
        case 5:
        delete_begin();
        break;
        case 6:
        delete_end();
        break;
        case 7:
        delete_random();
        break;
        case 8:
        delete_list();
        case 9:
        printf("Program Terminated");
        
        default:
        printf("Invalid option. ");
    }
    }while(option != 9);
    return 0;
}

void display(){
    struct node *ptr;
    ptr = head;
    if(head == NULL){
        printf("Linked list is empty. No nodes to display.");
    }
    else{
        while(ptr != NULL ){
            printf("\t%d",ptr->data);
            ptr = ptr->next;
        }
    }
}
void insert_begin(int value){
    struct node *temp; // declaring a new node. 
    temp = (struct node *)malloc(sizeof(struct node));//dynamically allocating the memory for this new node. 
    temp->data = value; //assigning data part = value by the user. 
    temp->prev = NULL; //because this node is going to be the first node. 
    if(head == NULL){
        printf("Linked list created. This node is the first node.");
    }
    else{
        temp->next = head;
        //the header node becomes the second node so the new node will store the previous header nodes address. 
        head->prev = temp;
        //head pointer updated to keep the address of the new node.
        head = temp;
    }
}

void insert_end(int value){
    struct node *temp; 
    struct node *ptr; //This will be for traversing the list and finding the last node. 
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = value;
    temp->next = NULL // because this is going to be the last node. it points to null.
    if(head == NULL){
        printf("Linked list created. This node is the first node.");
        head = temp;
    }
    else{
        ptr= head;//ptr points to head. we start traversing from head. 
        while (ptr != NULL){
            ptr = ptr->next;
        }
        ptr->next = temp; // ptr->next was NULL but now its pointing to the new inserted node.
        temp->prev = ptr; // the prev of temp node is pointing the node that used to be last.
    }
}
void insert_random(int value, int ele){
    struct node *ptr;//to traverse
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = value;
    temp ->prev = NULL;
    temp->next = NULL; // both set to null.
    if(head == NULL){
        printf(" \n Doubly Linked list created. This node is the first node.");
        head = temp;
    }
    else {
        ptr = head;
        while (ptr->data != ele){
            ptr = ptr->next;
        }
        temp->next = ptr->next;
        temp->prev = ptr;
        ptr->next->ptr 
    }
void delete_begin();
void delete_end();
void delete_random(int ele);
void count_nodes(head);
void delete_list();
